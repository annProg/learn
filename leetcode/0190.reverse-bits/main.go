package main

import "fmt"

func reverseBits2(num uint32) uint32 {
	var n uint32
	for i := 0; i < 32; i++ {
		n = n<<1 + num&1
		num = num >> 1
	}
	return n
}

// 题解，一次移动到位，比赋值操作快
func reverseBits(n uint32) (rev uint32) {
	for i := 0; i < 32 && n > 0; i++ {
		rev |= n & 1 << (31 - i)
		n >>= 1
	}
	return
}

// 位运算分治，自底向上
// 此方法举例如下，翻转  12345678
// 第一步：奇偶交换  21 43 65 87
// 第二步：每两位互换  4321 8765
// 第三步：每四位互换 87654321
// 扩展到 32 位树，则增加 每 八位 和 每 16位互换
const (
	m1 = 0x55555555 // 01010101010101010101010101010101  用于取出奇数位
	m2 = 0x33333333 // 00110011001100110011001100110011  用于取出每两位（奇数位）
	m4 = 0x0f0f0f0f // 00001111000011110000111100001111  用于取出每四位（奇数位）
	m8 = 0x00ff00ff // 00000000111111110000000011111111  用于取出每八位（奇数位）
)

func reverseBits3(n uint32) uint32 {
	n = n>>1&m1 | n&m1<<1 // 右移1位 和 m1掩码 按位与，取出偶数位 | 取出奇数位 并左移1位  => 偶数位奇数位完成互换
	n = n>>2&m2 | n&m2<<2 // 右移动2位和m2掩码按位与，取出偶数位的两位|取出奇数位的两位 左移 2位 => 每两位完成互换
	n = n>>4&m4 | n&m4<<4
	n = n>>8&m8 | n&m8<<8
	return n>>16 | n<<16 // 右移 16 位 和 左移 16位的结果按位 或，实现左16位右16位交换
}

func main() {
	fmt.Println(reverseBits(1))
}
